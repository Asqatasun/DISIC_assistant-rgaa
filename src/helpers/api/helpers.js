import {isArray, first, tail} from 'lodash';
import * as addClassName from '../helpers/addClassName';
import * as disableAllStyles from '../helpers/disableAllStyles';
import * as outline from '../helpers/outline';
import * as showAttribute from '../helpers/showAttribute';
import * as showAttributes from '../helpers/showAttributes';
import * as showChildren from '../helpers/showChildren';
import * as style from '../helpers/style';



/**
 *	We're using a simple map instead of System.import(), so we
 *	don't have to add each chunk generated by webpack to the
 *	manifest's content_scripts.
 */
const MODULES = {
	addClassName,
	disableAllStyles,
	outline,
	showAttribute,
	showAttributes,
	showChildren,
	style
};

/**
 *
 */
export const getModule = (name) =>
	MODULES[name];

/**
 *	Extracts info out of the given helper descriptor.
 *
 *	@param {string|array} helper - Helper descriptor. This can
 *		be either a string containing the helper's name, or an
 *		array containing the helper's name, followed by its
 *		arguments, for example : ["helperName", "arg1", "arg2"].
 */
export const info = (helper) => {
	const infoArray = isArray(helper) ? helper : [helper];
	const name = first(infoArray);
	const args = tail(infoArray);
	const module = getModule(name);

	return {
		module,
		name,
		args
	};
};

/**
 *	Asks for the given helper to describe its potential actions.
 *
 *	@param {string|array} helper - Helper descriptor.
 */
export const describe = (helper) => {
	const {module, args} = info(helper);
	return module.describe(...args);
};
